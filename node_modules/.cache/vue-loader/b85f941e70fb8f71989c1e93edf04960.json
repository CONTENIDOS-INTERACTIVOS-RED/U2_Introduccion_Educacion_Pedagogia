{"remainingRequest":"/home/runner/work/U2_Introduccion_Educacion_Pedagogia/U2_Introduccion_Educacion_Pedagogia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Introduccion_Educacion_Pedagogia/U2_Introduccion_Educacion_Pedagogia/src/views/curso/Tema2.vue?vue&type=template&id=68de3a26&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Introduccion_Educacion_Pedagogia/U2_Introduccion_Educacion_Pedagogia/src/views/curso/Tema2.vue","mtime":1751510849219},{"path":"/home/runner/work/U2_Introduccion_Educacion_Pedagogia/U2_Introduccion_Educacion_Pedagogia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Introduccion_Educacion_Pedagogia/U2_Introduccion_Educacion_Pedagogia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Introduccion_Educacion_Pedagogia/U2_Introduccion_Educacion_Pedagogia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Introduccion_Educacion_Pedagogia/U2_Introduccion_Educacion_Pedagogia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Introduccion_Educacion_Pedagogia/U2_Introduccion_Educacion_Pedagogia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJuby50ZXh0LXVwcGVyY2FzZSg6dGl0dWxvPSInVW5pZGFkIDIuIFRlb3LDrWFzIHBlZGFnw7NnaWNhcyB5IHN1IGltcGFjdG8gZW4gbGEgZWR1Y2FjacOzbiciIDpzdWJUaXR1bG89IicyLiBUZW9yw61hcyBwZWRhZ8OzZ2ljYXMgY2zDoXNpY2FzIHkgY29udGVtcG9yw6FuZWFzJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01CgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtMTIuY29sLXhsLTkuY29sLXh4bC0xMChkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgcC5tYi0wIEVuIGVzdGUgdGVtYSwgY29ub2NlcmVtb3MgbGFzIHByaW5jaXBhbGVzIHRlb3LDrWFzIHBlZGFnw7NnaWNhcyBxdWUgaGFuIGRhZG8gZm9ybWEgYSBsYSBlZHVjYWNpw7NuIG1vZGVybmE6IGVsIGNvbmR1Y3Rpc21vLCBlbCBjb2duaXRpdmlzbW8geSBlbCBjb25zdHJ1Y3RpdmlzbW8uIENhZGEgdW5hIGRlIGVzdGFzIHRlb3LDrWFzIG9mcmVjZSBwZXJzcGVjdGl2YXMgw7puaWNhcyBzb2JyZSBjw7NtbyBzZSBwcm9kdWNlIGVsIGFwcmVuZGl6YWplIHkgY8OzbW8gbG9zIGRvY2VudGVzIHB1ZWRlbiBmYWNpbGl0YXJsbyBkZSBtYW5lcmEgZWZlY3RpdmEuIEEgdHJhdsOpcyBkZWwgY29uZHVjdGlzbW8sIGFuYWxpemFyZW1vcyBlbCBwYXBlbCBkZWwgY29uZGljaW9uYW1pZW50byB5IGVsIHJlZnVlcnpvIGVuIGVsIGRlc2Fycm9sbG8gZGUgY29tcG9ydGFtaWVudG9zIGRlc2VhZG9zIGVuIGVsIGF1bGEuIERlc2RlIGVsIGNvZ25pdGl2aXNtbywgYWJvcmRhcmVtb3MgbG9zIHByb2Nlc29zIG1lbnRhbGVzIHF1ZSBpbnRlcnZpZW5lbiBlbiBlbCBhcHJlbmRpemFqZSwgY29tbyBsYSBhdGVuY2nDs24sIGxhIG1lbW9yaWEgeSBsYSBtZXRhY29nbmljacOzbiwgeSBjw7NtbyBlc3RvcyBwdWVkZW4gb3B0aW1pemFyc2UgcGFyYSBsb2dyYXIgdW4gYXByZW5kaXphamUgc2lnbmlmaWNhdGl2by4KICAgICAgLmQtbm9uZS5kLXhsLWJsb2NrLmNvbC14bC0zLmNvbC14eGwtMi5teC1hdXRvKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctMTUucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKCiAgICAjdF8yXzEudGl0dWxvLXNlZ3VuZG8KICAgICAgZGl2LmQtZmxleAogICAgICAgIHNwYW4ubWUtMyAyLjEgIAogICAgICAgIGgyIENvbmR1Y3Rpc21vCgogICAgLnJvdy5tYi00CiAgICAgIC5jb2wtMTIuY29sLXhsLTcuZC1mbGV4LmZsZXgtY29sdW1uCiAgICAgICAgcC5tYi00IEVzdGEgY29ycmllbnRlIHNlIG9yaWdpbsOzIGVuIGxhIHBzaWNvbG9nw61hIGV4cGVyaW1lbnRhbCB5IHNlIGNlbnRyYSBlbiBlbCBlc3R1ZGlvIGRlIGxhIGNvbmR1Y3RhIG9ic2VydmFibGUsIGNvbnNpZGVyYW5kbyBxdWUgZWwgYXByZW5kaXphamUgb2N1cnJlIGEgdHJhdsOpcyBkZSBsYSBpbnRlcmFjY2nDs24gZW50cmUgZXN0w61tdWxvcyBkZWwgZW50b3JubyB5IHJlc3B1ZXN0YXMgdmlzaWJsZXMuIAogICAgICAgIC5iZy1tb3JhZG8ucC00LmQtZmxleC5mbGV4LWNvbHVtbihkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgICBwLm1iLTQgUGFyYSBjb21wcmVuZGVyIGVsIGNvbmR1Y3Rpc21vIGRlbnRybyBkZSBsYXMgdGVvcsOtYXMgcGVkYWfDs2dpY2FzLCBlcyBlc2VuY2lhbCBjb25vY2VyIHN1cyBwcmluY2lwaW9zIGZ1bmRhbWVudGFsZXMgeSBsYXMgY29udHJpYnVjaW9uZXMgZGUgc3VzIHByaW5jaXBhbGVzIGV4cG9uZW50ZXMsIGxvIGludml0YW1vcyBhIGNvbnN1bHRhciBlbCBQREYgUHJpbmNpcGlvcyBmdW5kYW1lbnRhbGVzIGRlbCBjb25kdWN0aXNtbyB5IHByb2Z1bmRpemFyIHNvYnJlIGVzdG9zIGVsZW1lbnRvcy4KICAgICAgICAgIGEuZC1mbGV4Lm1lLWF1dG8uYmctd2hpdGUuYm94LXNoYWRvdy5jdXJzb3ItcG9pbnRlcihkYXRhLWFvcz0iem9vbS1pbiIgOmhyZWY9Im9idGVuZXJMaW5rKCcvZG93bmxvYWRzL0FuZXhvc182LnBkZicpIiB0YXJnZXQ9Il9ibGFuayIpCiAgICAgICAgICAgIGltZy5oLTEwMChzdHlsZT0id2lkdGg6IDQ4cHgiIHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvcGRmLWljb24tc3F1YXJlLnN2ZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgICAgIHAudGV4dC1zbWFsbC5mcy0xNHB4Lm15LWF1dG8ucHgtMiA8c3Ryb25nPkFuZXhvLjwvc3Ryb25nPiBQcmluY2lwaW9zIGZ1bmRhbWVudGFsZXMgZGVsIGNvbmR1Y3Rpc21vCiAgICAgIC5jb2wtNS5kLW5vbmUuZC14bC1ibG9jayhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTE2LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCgogICAgcC5tYi00KGRhdGEtYW9zPSJmYWRlLXVwIikgUmVjYXBpdHVsYW5kbywgZWwgY29uZHVjdGlzbW8gcGxhbnRlYSBxdWUgZWwgYXByZW5kaXphamUgZXMgdW4gcHJvY2VzbyBvYnNlcnZhYmxlIHF1ZSBwdWVkZSBtb2xkZWFyc2UgbWVkaWFudGUgY29uZGljaW9uYW1pZW50byB5IHJlZnVlcnpvLiBFc3RlIGVuZm9xdWUgcGVybWl0ZSBjb21wcmVuZGVyIGPDs21vIGNpZXJ0b3MgZXN0w61tdWxvcyB5IGNvbnNlY3VlbmNpYXMgcHVlZGVuIGluZmx1aXIgZGUgbWFuZXJhIGRlY2lzaXZhIGVuIGxhIGFkcXVpc2ljacOzbiBkZSBjb25vY2ltaWVudG9zIHkgY29uZHVjdGFzLiBBc8OtLCBlbCByZWZ1ZXJ6byB5IGVsIGNvbmRpY2lvbmFtaWVudG8sIG9wZXJhbiBjb21vIGhlcnJhbWllbnRhcyBxdWUsIGFsIHNlciBhcGxpY2FkYXMgZGUgZm9ybWEgYWRlY3VhZGEsIGF5dWRhbiBhIGVzdGFibGVjZXIgeSBtYW50ZW5lciBjb21wb3J0YW1pZW50b3MgZGVzZWFibGVzLCBwcm9wb3JjaW9uYW5kbyB1biBtYXJjbyB2YWxpb3NvIHBhcmEgbGEgZW5zZcOxYW56YSB5IGVsIGRlc2Fycm9sbG8gZGUgY29tcGV0ZW5jaWFzIGVuIGVsIGF1bGEuIAoKICAgIC5yb3cuYmctbW9yYWRvLmJnLWZ1bGwtd2lkdGgucHktNAogICAgICBkaXYucHgtNS5wYi1tZC0zLnB5LTQuZC1mbGV4CiAgICAgICAgLmQtbm9uZS5kLXhsLWJsb2NrLmNvbC14bC01LmNvbC14eGwtNC5teC1hdXRvLm10LTQubXQteGwtMChkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgICBpbWcuaC0xMDAoc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTE3LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgLmNvbC0xMi5jb2wteGwtNy5jb2wteHhsLTguZC1mbGV4LnBzLTQucHMteGwtNS5hbGlnbi1pdGVtcy1jZW50ZXIuZmxleC1jb2x1bW4oZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBoMi5tYi00LnBiLTIgQXBsaWNhY2lvbmVzIGVuIGVsIGF1bGEKICAgICAgICAgIHAubWItMyBFbCBjb25kdWN0aXNtbywgY29tbyB1bmEgZGUgbGFzIHRlb3LDrWFzIG3DoXMgaW5mbHV5ZW50ZXMgZW4gZWwgw6FtYml0byBkZSBsYSBwc2ljb2xvZ8OtYSBkZWwgYXByZW5kaXphamUsIGhhIGRlamFkbyB1bmEgaHVlbGxhIHByb2Z1bmRhIGVuIGxvcyBtb2RlbG9zIGVkdWNhdGl2b3MgYWN0dWFsZXMuIEFsIGVuZm9jYXJzZSBlbiBlbCBjb21wb3J0YW1pZW50byBvYnNlcnZhYmxlIHkgZW4gbGEgcmVzcHVlc3RhIGEgZXN0w61tdWxvcyBlc3BlY8OtZmljb3MsIGVzdGEgdGVvcsOtYSBwcm9wb25lIHF1ZSBlbCBhcHJlbmRpemFqZSBwdWVkZSBzZXIgZXN0cnVjdHVyYWRvIHkgb3B0aW1pemFkbyBhIHRyYXbDqXMgZGUgdMOpY25pY2FzIHF1ZSBtb2RpZmlxdWVuIGxhcyBjb25kdWN0YXMgZGUgbG9zIGVzdHVkaWFudGVzLiBFbiBlbCBlbnRvcm5vIGVkdWNhdGl2bywgZWwgY29uZHVjdGlzbW8gaGEgc2lkbyBsYSBiYXNlIHBhcmEgZGVzYXJyb2xsYXIgZXN0cmF0ZWdpYXMgcXVlIHByb211ZXZhbiBubyBzb2xvIGxhIGFkcXVpc2ljacOzbiBkZSBjb25vY2ltaWVudG9zLCBzaW5vIHRhbWJpw6luIGxhIGNyZWFjacOzbiBkZSBow6FiaXRvcyB5IGNvbmR1Y3RhcyBxdWUgZmF2b3JlemNhbiB1biBhbWJpZW50ZSBkZSByZXNwZXRvIHkgY29sYWJvcmFjacOzbiBlbiBlbCBhdWxhLiBBIGNvbnRpbnVhY2nDs24sIGVuIGVsIFBERiBBcGxpY2FjaW9uZXMgZW4gZWwgYXVsYSwgc2UgZGV0YWxsYW4gYWxndW5hcyBkZSBsYXMgcHJpbmNpcGFsZXMgYXBsaWNhY2lvbmVzIGRlbCBjb25kdWN0aXNtbyBlbiBsYSBkaW7DoW1pY2EgZXNjb2xhciwgcmVzYWx0YW5kbyBjw7NtbyBlc3RhcyBjb250cmlidXllbiBhbCBkZXNhcnJvbGxvIGludGVncmFsIGRlIGxvcyBlc3R1ZGlhbnRlcy4gIAogICAgICAgICAgYS5kLWZsZXgubWUtYXV0by5iZy13aGl0ZS5ib3gtc2hhZG93LmN1cnNvci1wb2ludGVyKGRhdGEtYW9zPSJ6b29tLWluIiA6aHJlZj0ib2J0ZW5lckxpbmsoJy9kb3dubG9hZHMvQW5leG9zXzEucGRmJykiIHRhcmdldD0iX2JsYW5rIikKICAgICAgICAgICAgaW1nLmgtMTAwKHN0eWxlPSJ3aWR0aDogNDhweCIgc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9wZGYtaWNvbi1zcXVhcmUuc3ZnJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKICAgICAgICAgICAgcC50ZXh0LXNtYWxsLmZzLTE0cHgubXktYXV0by5weC0yIDxzdHJvbmc+QW5leG8uPC9zdHJvbmc+IEFwbGljYWNpb25lcyBlbiBlbCBBdWxhCiAgICAgICAgICAgICAKICAgICN0XzJfMi50aXR1bG8tc2VndW5kbwogICAgICBkaXYuZC1mbGV4CiAgICAgICAgc3Bhbi5tZS0zIDIuMiAgCiAgICAgICAgaDIgQ29nbml0aXZpc21vIAoKICAgIC5yb3cubWItNAogICAgICAuY29sLTEyLmNvbC14bC03LmNvbC14eGwtOChkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgcC5tYi00IEVsIGNvZ25pdGl2aXNtbyBlcyB1bmEgZGUgbGFzIHRlb3LDrWFzIGRlbCBhcHJlbmRpemFqZSBtw6FzIGltcG9ydGFudGVzIGVuIGxhIGVkdWNhY2nDs24uIEVzdGEgdGVvcsOtYSBzZSBlbmZvY2EgZW4gbG9zIHByb2Nlc29zIG1lbnRhbGVzIHF1ZSBvY3VycmVuIGR1cmFudGUgZWwgYXByZW5kaXphamUsIGNvbnNpZGVyYW5kbyBxdWUgbGEgbWVudGUgaHVtYW5hIGZ1bmNpb25hIGRlIG1hbmVyYSBzaW1pbGFyIGEgdW5hIGNvbXB1dGFkb3JhOiBwcm9jZXNhIGluZm9ybWFjacOzbiwgYWxtYWNlbmEgZGF0b3MgeSByZWN1cGVyYSBjb25vY2ltaWVudG9zLiAKICAgICAgICBwLm1iLTAgQ29ub3pjYW1vcyBsb3MgcHJpbmNpcGFsZXMgZXhwb25lbnRlcyBkZSBlc3RhIHRlb3LDrWEsIGN1eWFzIGlkZWFzIGhhbiBzaWRvIGNydWNpYWxlcyBwYXJhIGVudGVuZGVyIGPDs21vIGFwcmVuZGVtb3MgeSBjw7NtbyBwb2RlbW9zIGVuc2XDsWFyIG1lam9yOgogICAgICAuZC1ub25lLmQteGwtYmxvY2suY29sLXhsLTUuY29sLXh4bC00Lm14LWF1dG8oZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgaW1nLmgtMTAwKHNyYz0nQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy0xOC5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQoKICAgIFRhYnNDLm1iLTQKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IkplYW4gUGlhZ2V0IiwgOmljb25Vcmw9InJlcXVpcmUoJ0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctMTkuc3ZnJykiKQogICAgICAgIC5yb3cKICAgICAgICAgIC5kLW5vbmUuZC1sZy1ibG9jay5jb2wtbWQtMTIuY29sLWxnLTUuY29sLXhsLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTIwLnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgICAuY29sLW1kLTEyLmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgICAgaDQgSmVhbiBQaWFnZXQKICAgICAgICAgICAgcC5tYi00KGRhdGEtYW9zPSJmYWRlLXVwIikgRXMgY29ub2NpZG8gcG9yIHN1IHRlb3LDrWEgZGVsIGRlc2Fycm9sbG8gY29nbml0aXZvLCBxdWUgZXN0YWJsZWNlIHF1ZSBsYXMgcGVyc29uYXMgcGFzYW4gcG9yIGRpZmVyZW50ZXMgZXRhcGFzIGEgbWVkaWRhIHF1ZSBjcmVjZW4geSBzZSBkZXNhcnJvbGxhbi4gU2Vnw7puIFBpYWdldCAoMTk1MiksIGhheSBjdWF0cm8gZXRhcGFzIGZ1bmRhbWVudGFsZXMgZW4gZWwgZGVzYXJyb2xsbyBjb2duaXRpdm86IGxhIHNlbnNvcmlvbW90b3JhLCBsYSBwcmVvcGVyYWNpb25hbCwgbGEgZGUgb3BlcmFjaW9uZXMgY29uY3JldGFzIHkgbGEgZGUgb3BlcmFjaW9uZXMgZm9ybWFsZXMuIAogICAgICAgICAgICBwLm1iLTAgQ2FkYSBldGFwYSByZWZsZWphIHVuIG5pdmVsIGRpZmVyZW50ZSBkZSBjYXBhY2lkYWQgY29nbml0aXZhIHkgdW5hIG1hbmVyYSBlc3BlY8OtZmljYSBkZSBpbnRlcmFjdHVhciBjb24gZWwgZW50b3Juby4gUG9yIGVqZW1wbG8sIGVuIGxhIGV0YXBhIHByZW9wZXJhY2lvbmFsLCBxdWUgb2N1cnJlIGFwcm94aW1hZGFtZW50ZSBlbnRyZSBsb3MgMiB5IGxvcyA3IGHDsW9zLCBsb3MgbmnDsW9zIGNvbWllbnphbiBhIHVzYXIgZWwgbGVuZ3VhamUgeSBkZXNhcnJvbGxhbiBoYWJpbGlkYWRlcyBkZSBwZW5zYW1pZW50byBzaW1iw7NsaWNvLiBTaW4gZW1iYXJnbywgc3UgcmF6b25hbWllbnRvIHNpZ3VlIHNpZW5kbyBlZ29jw6ludHJpY28geSBjb25jcmV0bywgbG8gcXVlIGxpbWl0YSBzdSBjb21wcmVuc2nDs24gZGUgY29uY2VwdG9zIG3DoXMgYWJzdHJhY3Rvcy4KCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJKZXJvbWUgQnJ1bmVyIiwgOmljb25Vcmw9InJlcXVpcmUoJ0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctMTkuc3ZnJykiKQogICAgICAgIC5yb3cKICAgICAgICAgIC5kLW5vbmUuZC1sZy1ibG9jay5jb2wtbWQtMTIuY29sLWxnLTUuY29sLXhsLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTIxLnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgICAuY29sLW1kLTEyLmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgICAgaDQgSmVyb21lIEJydW5lcgogICAgICAgICAgICBwLm1iLTQoZGF0YS1hb3M9ImZhZGUtdXAiKSBEZXN0YWNhIGxhIGltcG9ydGFuY2lhIGRlIGxhIGN1bHR1cmEgeSBsYSBpbnRlcmFjY2nDs24gc29jaWFsIGVuIGVsIGFwcmVuZGl6YWplLiBCcnVuZXIgKDE5NjYpIHNvc3RpZW5lIHF1ZSBlbCBhcHJlbmRpemFqZSBlcyB1biBwcm9jZXNvIGFjdGl2bywgZG9uZGUgZWwgZXN0dWRpYW50ZSBjb25zdHJ1eWUgc3UgcHJvcGlvIGNvbm9jaW1pZW50byBhIHRyYXbDqXMgZGUgbGEgZXhwbG9yYWNpw7NuIHkgZWwgZGVzY3VicmltaWVudG8uIEludHJvZHVqbyBlbCBjb25jZXB0byBkZSBhbmRhbWlhamUsIHF1ZSBzZSByZWZpZXJlIGFsIGFwb3lvIHF1ZSB1biBlZHVjYWRvciBwcm9wb3JjaW9uYSBhIGxvcyBlc3R1ZGlhbnRlcyBkdXJhbnRlIGVsIGFwcmVuZGl6YWplLiAgCiAgICAgICAgICAgIHAubWItMChkYXRhLWFvcz0iZmFkZS11cCIpIEVzdGUgYXBveW8gcHVlZGUgc2VyIGdyYWR1YWwsIHBlcm1pdGllbmRvIHF1ZSBsb3MgZXN0dWRpYW50ZXMgc2UgdnVlbHZhbiBtw6FzIGF1dMOzbm9tb3MgYSBtZWRpZGEgcXVlIGFkcXVpZXJlbiBoYWJpbGlkYWRlcyB5IGNvbm9jaW1pZW50b3MuIEVsIGVuZm9xdWUgZGUgQnJ1bmVyIGludml0YSBhIGxvcyBlZHVjYWRvcmVzIGEgZGlzZcOxYXIgYWN0aXZpZGFkZXMgcXVlIGZvbWVudGVuIGxhIHBhcnRpY2lwYWNpw7NuIGFjdGl2YSwgZGUgbW9kbyBxdWUgbG9zIGVzdHVkaWFudGVzIHNlIGNvbnZpZXJ0YW4gZW4gcHJvdGFnb25pc3RhcyBkZSBzdSBwcm9waW8gYXByZW5kaXphamUsIGxvIHF1ZSByZXN1bHRhIGVuIGV4cGVyaWVuY2lhcyBtw6FzIHNpZ25pZmljYXRpdmFzLgoKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IlJvYmVydCBHYWduw6kiLCA6aWNvblVybD0icmVxdWlyZSgnQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy0xOS5zdmcnKSIpCiAgICAgICAgLnJvdwogICAgICAgICAgLmQtbm9uZS5kLWxnLWJsb2NrLmNvbC1tZC0xMi5jb2wtbGctNS5jb2wteGwtNChkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctMjIucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKICAgICAgICAgIC5jb2wtbWQtMTIuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgICBoNCBSb2JlcnQgR2FnbsOpCiAgICAgICAgICAgIHAubWItNChkYXRhLWFvcz0iZmFkZS11cCIpIFNlw7FhbGEgcXVlIGRpZmVyZW50ZXMgdGlwb3MgZGUgYXByZW5kaXphamUgcmVxdWllcmVuIGNvbmRpY2lvbmVzIGVzcGVjw61maWNhcyBwYXJhIGFkcXVpcmlyIGNvbm9jaW1pZW50b3MgeSBoYWJpbGlkYWRlcyBkZSBtYW5lcmEgZWZlY3RpdmEuIEdhZ27DqSBzdWdpZXJlIHF1ZSBlbCBhcHJlbmRpemFqZSBkZWJlIG9yZ2FuaXphcnNlIGVuIHVuYSBzZWN1ZW5jaWEgbMOzZ2ljYSBkZSBldmVudG9zLCBkZXNkZSBsbyBtw6FzIGLDoXNpY28gaGFzdGEgbG8gbcOhcyBjb21wbGVqby4gQ2FkYSBldmVudG8gZGUgYXByZW5kaXphamUgYWN0aXZhIHVuIHByb2Nlc28gY29nbml0aXZvIGVzcGVjw61maWNvLCBjb21vIGxhIGF0ZW5jacOzbiwgbGEgcmV0ZW5jacOzbiB5IGVsIHJlY3VlcmRvLiBFbCDDqXhpdG8gZGUgY2FkYSBmYXNlIGRlbCBhcHJlbmRpemFqZSBkZXBlbmRlIGRlIHVuIGFkZWN1YWRvIGFuZGFtaWFqZSBlbiBsYSBlbnNlw7FhbnphLiBFc3RvIHNpZ25pZmljYSBxdWUgZWwgZG9jZW50ZSBubyBzb2xvIHRyYW5zbWl0ZSBpbmZvcm1hY2nDs24sIHNpbm8gcXVlIHRhbWJpw6luIGNyZWEgdW4gZW50b3JubyBxdWUgcGVybWl0ZSBhIGxvcyBlc3R1ZGlhbnRlcyBvcmdhbml6YXIgeSBjb21wcmVuZGVyIGxhIGluZm9ybWFjacOzbiBkZSBtYW5lcmEgcHJvZ3Jlc2l2YS4KICAgICAgICAgICAgcC5tYi0wIFBvciBsbyB0YW50bywgbGEgY29udHJpYnVjacOzbiBkZSBHYWduw6kgYWwgY29nbml0aXZpc21vIGVzIGZ1bmRhbWVudGFsLCB5YSBxdWUgc2UgZW5mb2NhIGVuIGVsIHBhcGVsIGFjdGl2byBkZSBsb3MgcHJvY2Vzb3MgY29nbml0aXZvcyB5IGVuIGVsIGRpc2XDsW8gZGUgZXN0cmF0ZWdpYXMgZGUgZW5zZcOxYW56YSBxdWUgZmFjaWxpdGFuIGxhIHJldGVuY2nDs24geSBsYSB0cmFuc2ZlcmVuY2lhIGRlIGNvbm9jaW1pZW50b3MuIEFsIHJlY29ub2NlciB5IGFwbGljYXIgZXN0b3MgcHJpbmNpcGlvcyBlbiBlbCBhdWxhLCBzZSBmb21lbnRhIHVuIGFwcmVuZGl6YWplIG3DoXMgc2lnbmlmaWNhdGl2byB5IGVmZWN0aXZvLiBFbiBjb25jbHVzacOzbiwgc3UgZW5mb3F1ZSBzaWd1ZSBzaWVuZG8gdW5hIHJlZmVyZW5jaWEgY2xhdmUgZW4gZWwgZGlzZcOxbyBkZSBtYXRlcmlhbGVzIGVkdWNhdGl2b3MsIG9yZ2FuaXphbmRvIGVsIGNvbnRlbmlkbyBkZSBtYW5lcmEgcXVlIGxvcyBlc3R1ZGlhbnRlcyBwdWVkYW4gYXNpbWlsYXIgeSBjb25zdHJ1aXIgc3UgYXByZW5kaXphamUgZGUgbWFuZXJhIHByb2dyZXNpdmEgeSBlZmljYXouCgogICAgLnJvdy5tYi01Lm14LTAKICAgICAgLmNvbC0xMi5jb2wteGwtOC5kLWZsZXguYWxpZ24taXRlbXMtY2VudGVyLmJnLXJvc2EucC00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICBwLm1iLTAoZGF0YS1hb3M9ImZhZGUtdXAiKSBUYW50byBQaWFnZXQgY29tbyBCcnVuZXIgcmVzYWx0YW4gbGEgaW1wb3J0YW5jaWEgZGUgbGEgcmVmbGV4acOzbiB5IGxhIG1ldGFjb2duaWNpw7NuIGVuIGVsIGFwcmVuZGl6YWplLiBMYSBtZXRhY29nbmljacOzbiBlcyBsYSBjYXBhY2lkYWQgZGUgdW5hIHBlcnNvbmEgcGFyYSBlbnRlbmRlciB5IHJlZ3VsYXIgc3VzIHByb3Bpb3MgcHJvY2Vzb3MgZGUgcGVuc2FtaWVudG8uIEFsIGZvbWVudGFyIGVzdGEgaGFiaWxpZGFkLCBsb3MgZXN0dWRpYW50ZXMgcHVlZGVuIGV2YWx1YXIgc3UgcHJvcGlvIGFwcmVuZGl6YWplLCBpZGVudGlmaWNhciBlc3RyYXRlZ2lhcyBlZmVjdGl2YXMgeSByZWFsaXphciBhanVzdGVzIGN1YW5kbyBzZWEgbmVjZXNhcmlvLiBFc3RlIGF1dG9ycmVmbGV4acOzbiBlcyBlc2VuY2lhbCBwYXJhIGRlc2Fycm9sbGFyIGhhYmlsaWRhZGVzIGRlIHBlbnNhbWllbnRvIGNyw610aWNvIHkgcmVzb2x1Y2nDs24gZGUgcHJvYmxlbWFzLCBhc3BlY3RvcyBjcnVjaWFsZXMgZW4gbGEgZWR1Y2FjacOzbiBhY3R1YWwuIAogICAgICAuZC1ub25lLmQteGwtYmxvY2suY29sLTQucHgtMChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICBpbWcuaC0xMDAoc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTIzLnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCgogICAgaDIgUHJvY2Vzb3MgZGUgYXByZW5kaXphamUKICAgIHAubWItNCBQYXJhIGNvbXByZW5kZXIgbG9zIHByb2Nlc29zIGRlIGFwcmVuZGl6YWplIGRlc2RlIGxhIHBlcnNwZWN0aXZhIGNvZ25pdGl2aXN0YSwgcmVzdWx0YSBlc2VuY2lhbCBwcm9mdW5kaXphciBlbiBjw7NtbyBzZSBkZXNhcnJvbGxhbiB5IGFjdMO6YW4gbGEgYXRlbmNpw7NuLCBsYSBtZW1vcmlhIHkgbGEgbWV0YWNvZ25pY2nDs24gZW4gZWwgYXByZW5kaXphamUuIEVsIGNvZ25pdGl2aXNtbywgdW5hIHRlb3LDrWEgcXVlIHNlIGNlbnRyYSBlbiBsb3MgcHJvY2Vzb3MgbWVudGFsZXMgaW50ZXJub3MgZGVsIGluZGl2aWR1bywgc29zdGllbmUgcXVlIGVsIGFwcmVuZGl6YWplIHNlIGJhc2EgZW4gZWwgcHJvY2VzYW1pZW50byBkZSBsYSBpbmZvcm1hY2nDs24geSBlbiBsYSBjb25zdHJ1Y2Npw7NuIGFjdGl2YSBkZSBjb25vY2ltaWVudG8uIEVzdG8gc2lnbmlmaWNhIHF1ZSBsYSBtZW50ZSBubyBlcyB1biBzaW1wbGUgcmVjZXB0b3IgcGFzaXZvIGRlIGluZm9ybWFjacOzbjsgZW4gY2FtYmlvLCBzZWxlY2Npb25hLCBvcmdhbml6YSB5IGFsbWFjZW5hIGRhdG9zIGFjdGl2YW1lbnRlIChHYWduw6kgZXQgYWwuLCAxOTkzKS4KICAgIHAubWItNCBBIGNvbnRpbnVhY2nDs24sIGNvbm9jZXJlbW9zIGNhZGEgdW5vIGRlIGxvcyBwcm9jZXNvcyBpbXBsaWNhZG9zIGVuIGVsIGFwcmVuZGl6YWplOgoKCiAgICAucm93LnBvc2l0aW9uLXJlbGF0aXZlLm1iLTUucHktNC5iZy1mb25kby0yLmJnLWZ1bGwtd2lkdGgKICAgICAgZGl2LnB4LTQucHgtbWQtNS5weS1tZC0zCiAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikuYmctd2hpdGUKICAgICAgICAgIC5yb3cucC00LnB4LW1kLTUucHktbGctNS5qdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbgogICAgICAgICAgICAuY29sLW1kLTEyLmNvbC1sZy03Lm1iLTQubWItbWQtMChkYXRhLWFvcz0iem9vbS1pbi1yaWdodCIpCiAgICAgICAgICAgICAgcC50ZXh0LWJvbGQgQXRlbmNpw7NuCiAgICAgICAgICAgICAgcC5tYi0xIFNlIHJlZmllcmUgYSBsYSBjYXBhY2lkYWQgcXVlIHBlcm1pdGUgZW5mb2NhciBsb3MgcmVjdXJzb3MgY29nbml0aXZvcyBlbiBpbmZvcm1hY2nDs24gcmVsZXZhbnRlLCBmaWx0cmFuZG8gZXN0w61tdWxvcyBpbm5lY2VzYXJpb3MgbyBkaXN0cmFjY2lvbmVzLiAKICAgICAgICAgICAgICBwLm1iLTQgTGEgYXRlbmNpw7NuIG5vIHNvbG8gZmFjaWxpdGEgbGEgcmVjZXBjacOzbiBkZSBudWV2YSBpbmZvcm1hY2nDs24sIHNpbm8gcXVlIHRhbWJpw6luIGVzIGNsYXZlIHBhcmEgc3UgcmV0ZW5jacOzbiwgYXNlZ3VyYW5kbyBxdWUgbG9zIHJlY3Vyc29zIG1lbnRhbGVzIHNlIGRpcmlqYW4gYSBsYSBpbmZvcm1hY2nDs24gc2lnbmlmaWNhdGl2YSAoUG9zbmVyICYgUGV0ZXJzZW4sIDE5OTApLiAKICAgICAgICAgICAgICBwLm1iLTAgRW4gZXN0YSBsw61uZWEsIHNlIHB1ZWRlIG9ic2VydmFyIGPDs21vIGxvcyBlbnRvcm5vcyBkZSBhcHJlbmRpemFqZSwgZGViZW4gZXN0YXIgZGlzZcOxYWRvcyBwYXJhIG1pbmltaXphciBkaXN0cmFjY2lvbmVzIHkgb3B0aW1pemFyIGxhIGF0ZW5jacOzbiBzb3N0ZW5pZGEsIGRlIG1vZG8gcXVlIGVsIGVzdHVkaWFudGUgcHVlZGEgY29uY2VudHJhcnNlIHkgcHJvY2VzYXIgbGEgaW5mb3JtYWNpw7NuIGRlIG1hbmVyYSBlZmVjdGl2YS4KCiAgICAgICAgICAgIC5kLW5vbmUuZC1sZy1ibG9jay5jb2wtbWQtNi5jb2wtbGctNChkYXRhLWFvcz0iem9vbS1pbi1sZWZ0IikKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctMjQucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKICAgICAgICAgIC5yb3cucC00LnB4LW1kLTUucHktbGctNS5qdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbgogICAgICAgICAgICAuY29sLW1kLTEyLmNvbC1sZy03Lm1iLTQubWItbWQtMAogICAgICAgICAgICAgIHAudGV4dC1ib2xkIE1lbW9yaWEKICAgICAgICAgICAgICBwLm1iLTQgQ29tcG9uZW50ZSBmdW5kYW1lbnRhbCBkZWwgY29nbml0aXZpc21vLCBsYSBtZW1vcmlhIGh1bWFuYSBzZSBwdWVkZSBjbGFzaWZpY2FyIGVuIHZhcmlvcyBzaXN0ZW1hcywgY29tbyBsYSBtZW1vcmlhIGRlIHRyYWJham8sIHF1ZSBwZXJtaXRlIHJldGVuZXIgeSBtYW5pcHVsYXIgaW5mb3JtYWNpw7NuIGRlIGZvcm1hIHRlbXBvcmFsLCB5IGxhIG1lbW9yaWEgYSBsYXJnbyBwbGF6bywgZG9uZGUgc2UgYWxtYWNlbmFuIGNvbm9jaW1pZW50b3MgcGFyYSB1biB1c28gcG9zdGVyaW9yLiBTZWfDum4gQmFkZGVsZXkgeSBIaXRjaCAoMTk3NCksIGxhIG1lbW9yaWEgZGUgdHJhYmFqbyBhY3TDumEgY29tbyB1biBlc3BhY2lvIGRlIHByb2Nlc2FtaWVudG8gYWN0aXZvIGVuIGVsIHF1ZSBzZSBpbnRlZ3JhbiB5IHJlb3JnYW5pemFuIGxvcyBudWV2b3MgZGF0b3MgZW4gZnVuY2nDs24gZGUgbG9zIGNvbm9jaW1pZW50b3MgcHJldmlvcy4gCiAgICAgICAgICAgICAgcC5tYi0wIEVzdGUgcHJvY2VzbyBlcyBjbGF2ZSBwYXJhIGVsIGFwcmVuZGl6YWplLCBkYWRvIHF1ZSBwZXJtaXRlIG9yZ2FuaXphciBsYSBpbmZvcm1hY2nDs24gZGUgbWFuZXJhIHF1ZSBzZSBhbG1hY2VuZSBlbiBsYSBtZW1vcmlhIGEgbGFyZ28gcGxhem8geSBwdWVkYSByZWN1cGVyYXJzZSBjdWFuZG8gc2VhIG5lY2VzYXJpby4KCiAgICAgICAgICAgIC5kLW5vbmUuZC1sZy1ibG9jay5jb2wtbWQtNi5jb2wtbGctNAogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy0yNS5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQogICAgICAgICAgLnJvdy5wLTQucHgtbWQtNS5weS1sZy01Lmp1c3RpZnktY29udGVudC1iZXR3ZWVuCiAgICAgICAgICAgIC5jb2wtbWQtMTIuY29sLWxnLTcubWItNC5tYi1tZC0wCiAgICAgICAgICAgICAgcC50ZXh0LWJvbGQgTWV0YWNvZ25pY2nDs24KICAgICAgICAgICAgICBwLm1iLTQgU2UgZW50aWVuZGUgY29tbyBsYSDigJxjb25jaWVuY2lhIHkgY29udHJvbCBzb2JyZSBsb3MgcHJvcGlvcyBwcm9jZXNvcyBjb2duaXRpdm9z4oCdIChGbGF2ZWxsLCAxOTc5KS4gTGEgbWV0YWNvZ25pY2nDs24gcGVybWl0ZSBhbCBlc3R1ZGlhbnRlIG5vIHNvbG8gbW9uaXRvcmVhciBzdSBjb21wcmVuc2nDs24geSByZW5kaW1pZW50bywgc2lubyB0YW1iacOpbiBhanVzdGFyIHN1cyBlc3RyYXRlZ2lhcyBkZSBhcHJlbmRpemFqZSBzZWfDum4gc2VhIG5lY2VzYXJpby4gCiAgICAgICAgICAgICAgcC5tYi0wIEVzIGRlY2lyLCB1bmEgcGVyc29uYSBjb24gaGFiaWxpZGFkZXMgbWV0YWNvZ25pdGl2YXMgYXZhbnphZGFzIHB1ZWRlIGRldGVjdGFyIHNpIHVuYSBlc3RyYXRlZ2lhIGRlIGVzdHVkaW8gbm8gZXMgZWZlY3RpdmEgeSBjYW1iaWFybGEgcG9yIG90cmEgcXVlIGxlIGZhY2lsaXRlIGxhIGNvbXByZW5zacOzbiBvIHJldGVuY2nDs24gZGUgaW5mb3JtYWNpw7NuLiBFbCBkZXNhcnJvbGxvIGRlIGVzdGFzIGhhYmlsaWRhZGVzIGVzIHBhcnRpY3VsYXJtZW50ZSByZWxldmFudGUgZW4gbGEgZWR1Y2FjacOzbiwgcHVlcyBmb21lbnRhIGxhIGF1dG9ub23DrWEgeSBmYWNpbGl0YSBxdWUgZWwgZXN0dWRpYW50ZSBzZSBjb252aWVydGEgZW4gdW4gYXByZW5kaXogYWN0aXZvIHkgY29uc2NpZW50ZSBkZSBzdSBwcm9waW8gcHJvY2VzbyBkZSBhcHJlbmRpemFqZS4KICAgICAgICAgICAgLmQtbm9uZS5kLWxnLWJsb2NrLmNvbC1tZC02LmNvbC1sZy00CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTI2LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCgogICAgLnJvdy5tYi00CiAgICAgIC5jb2wtMTIuY29sLXhsLTcoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgIHAubWItMCBDb21vIHNlIG9ic2VydmEsIGxhIHRlb3LDrWEgY29nbml0aXZpc3RhIHByb3BvcmNpb25hIHVuYSBiYXNlIHPDs2xpZGEgcGFyYSBhbmFsaXphciB5IG1lam9yYXIgbG9zIHByb2Nlc29zIGRlIGVuc2XDsWFuemEgeSBhcHJlbmRpemFqZSwgY29uc2lkZXJhbmRvIG5vIHNvbG8gbGEgYXRlbmNpw7NuIHkgbGEgbWVtb3JpYSBjb21vIGNvbXBvbmVudGVzIGVzZW5jaWFsZXMsIHNpbm8gdGFtYmnDqW4gbGEgbWV0YWNvZ25pY2nDs24gY29tbyB1bmEgaGFiaWxpZGFkIGNydWNpYWwgcGFyYSBlbCBhcHJlbmRpemFqZSBhdXRvcnJlZ3VsYWRvLiBFc3RvcyBjb25jZXB0b3Mgc2UgaW50ZXJyZWxhY2lvbmFuIGRlIG1hbmVyYSBxdWUgZmFjaWxpdGFuIGxhIGFkcXVpc2ljacOzbiB5IGNvbnNvbGlkYWNpw7NuIGRlIGNvbm9jaW1pZW50b3MgYSBsbyBsYXJnbyBkZWwgdGllbXBvLiAKICAgICAgLmQtbm9uZS5kLXhsLWJsb2NrLmNvbC01LnB4LTAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgaW1nLmgtMTAwKHNyYz0nQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy0yNy5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQoKICAgIC5yb3cuYmctbW9yYWRvLmJnLWZ1bGwtd2lkdGgucHktNC5tYi01CiAgICAgIGRpdi5weC01LnBiLW1kLTMucHktNC5kLWZsZXgKICAgICAgICAuZC1ub25lLmQteGwtYmxvY2suY29sLXhsLTUubXgtYXV0by5tdC00Lm10LXhsLTAoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy0yOC5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQogICAgICAgIC5jb2wtMTIuY29sLXhsLTcuZC1mbGV4LnBzLTQucHMteGwtNS5hbGlnbi1pdGVtcy1jZW50ZXIuZmxleC1jb2x1bW4oZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBoMi5tYi00LnBiLTIubWUtYXV0byBFc3RyYXRlZ2lhcyBkZSBlbnNlw7FhbnphIGJhc2FkYXMgZW4gZWwgY29nbml0aXZpc21vCiAgICAgICAgICBwLm1iLTMgRWwgY29nbml0aXZpc21vLCBjb21vIGVuZm9xdWUgdGXDs3JpY28gZGVsIGFwcmVuZGl6YWplLCBwb25lIMOpbmZhc2lzIGVuIGxvcyBwcm9jZXNvcyBtZW50YWxlcyBpbnRlcm5vcyBxdWUgaW50ZXJ2aWVuZW4gZW4gbGEgYWRxdWlzaWNpw7NuIHkgcHJvY2VzYW1pZW50byBkZSBjb25vY2ltaWVudG9zLiBBIGRpZmVyZW5jaWEgZGVsIGNvbmR1Y3Rpc21vLCBxdWUgcHJpb3JpemEgbGEgbW9kaWZpY2FjacOzbiBkZSBjb25kdWN0YXMgb2JzZXJ2YWJsZXMsIGVsIGNvZ25pdGl2aXNtbyBzZSBjZW50cmEgZW4gY8OzbW8gZWwgaW5kaXZpZHVvIG9yZ2FuaXphLCBpbnRlcnByZXRhIHkgYWxtYWNlbmEgbGEgaW5mb3JtYWNpw7NuLCBidXNjYW5kbyBxdWUgZWwgYXByZW5kaXphamUgc2VhIHNpZ25pZmljYXRpdm8geSBlc3RydWN0dXJhZG8uIEVzdGEgcGVyc3BlY3RpdmEgc3VicmF5YSBsYSBpbXBvcnRhbmNpYSBkZSBlc3RyYXRlZ2lhcyBxdWUgZXN0aW11bGVuIGxhIGNvbXByZW5zacOzbiBwcm9mdW5kYSwgbGEgY29uc3RydWNjacOzbiBhY3RpdmEgZGVsIGNvbm9jaW1pZW50byB5IGVsIGRlc2Fycm9sbG8gZGUgaGFiaWxpZGFkZXMgZGUgYXV0b3JyZWd1bGFjacOzbiBlbiBlbCBlc3R1ZGlhbnRlLiBBIGNvbnRpbnVhY2nDs24sIGVuIGVsIFBERiAjW3N0cm9uZyBFc3RyYXRlZ2lhcyBkZSBlbnNlw7FhbnphIGJhc2FkYXMgZW4gZWwgY29nbml0aXZpc21vXSwgc2UgcHJlc2VudGFuIGFsZ3VuYXMgZGUgbGFzIGVzdHJhdGVnaWFzIG3DoXMgZGVzdGFjYWRhcyBkZWwgY29nbml0aXZpc21vLCByZXNhbHRhbmRvIGPDs21vIGNvbnRyaWJ1eWVuIGEgb3B0aW1pemFyIGVsIHByb2Nlc28gZGUgZW5zZcOxYW56YSB5IGFwcmVuZGl6YWplIGVuIGVsIGF1bGEuIAogICAgICAgICAgYS5kLWZsZXgubWUtYXV0by5iZy13aGl0ZS5ib3gtc2hhZG93LmN1cnNvci1wb2ludGVyKGRhdGEtYW9zPSJ6b29tLWluIiA6aHJlZj0ib2J0ZW5lckxpbmsoJy9kb3dubG9hZHMvQW5leG9zXzMucGRmJykiIHRhcmdldD0iX2JsYW5rIikKICAgICAgICAgICAgaW1nLmgtMTAwKHN0eWxlPSJ3aWR0aDogNDhweCIgc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9wZGYtaWNvbi1zcXVhcmUuc3ZnJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKICAgICAgICAgICAgcC50ZXh0LXNtYWxsLmZzLTE0cHgubXktYXV0by5weC0yIDxzdHJvbmc+QW5leG8uPC9zdHJvbmc+IEVzdHJhdGVnaWFzIGRlIGVuc2XDsWFuemEgYmFzYWRhcyBlbiBlbCBjb2duaXRpdmlzbW8KCiAgICAjdF8yXzMudGl0dWxvLXNlZ3VuZG8KICAgICAgZGl2LmQtZmxleAogICAgICAgIHNwYW4ubWUtMyAyLjMgIAogICAgICAgIGgyIENvbnN0cnVjdGl2aXNtbwogICAgCiAgICBwLm1iLTQgRWwgY29uc3RydWN0aXZpc21vIGVzIHVuYSB0ZW9yw61hIGRlbCBhcHJlbmRpemFqZSBxdWUgZW5mYXRpemEgbGEgaWRlYSBxdWUgbG9zIGVzdHVkaWFudGVzIGNvbnN0cnV5ZW4gc3UgcHJvcGlvIGNvbm9jaW1pZW50byBhIHRyYXbDqXMgZGUgbGEgZXhwZXJpZW5jaWEgeSBsYSBpbnRlcmFjY2nDs24gY29uIHN1IGVudG9ybm8uIFBhcmEgZW50ZW5kZXIgbWVqb3IgZXN0YSB0ZW9yw61hLCBlcyDDunRpbCBleHBsb3JhciBsYXMgaWRlYXMgZGUgdHJlcyBkZSBzdXMgcHJpbmNpcGFsZXMgZXhwb25lbnRlczogTGV2IFZ5Z290c2t5LCBKb2huIERld2V5IHkgRGF2aWQgQXVzdWJlbC4gCiAgICBwLm1iLTQgQSBjb250aW51YWNpw7NuLCBjb25vemNhbW9zIGxvcyBlbmZvcXVlcyBkZSBjYWRhIHVubyBkZSBlbGxvcywgbG9zIGN1YWxlcyBheXVkYW4gYSBjb21wcmVuZGVyIGPDs21vIHNlIHByb2R1Y2UgZWwgYXByZW5kaXphamUgZW4gbGFzIGF1bGFzOgoKICAgIC5yb3cucG9zaXRpb24tcmVsYXRpdmUubWItNC5weS00LmJnLWZvbmRvLTIuYmctZnVsbC13aWR0aAogICAgICBkaXYucHgtNC5weC1tZC01LnB5LW1kLTMKICAgICAgICBTbHlkZXJBKHRpcG89ImIiKS5iZy13aGl0ZQogICAgICAgICAgLnJvdy5wLTQucHgtbWQtNS5weS1sZy01Lmp1c3RpZnktY29udGVudC1iZXR3ZWVuCiAgICAgICAgICAgIC5jb2wtbWQtMTIuY29sLWxnLTcubWItNC5tYi1tZC0wKGRhdGEtYW9zPSJ6b29tLWluLXJpZ2h0IikKICAgICAgICAgICAgICBwLnRleHQtYm9sZCBMZXYgVnlnb3Rza3kKICAgICAgICAgICAgICBwLm1iLTEgQ29ub2NpZG8gcG9yIHN1IGVuZm9xdWUgZW4gbGEgaW1wb3J0YW5jaWEgZGUgbGEgaW50ZXJhY2Npw7NuIHNvY2lhbCBlbiBlbCBhcHJlbmRpemFqZS4gVW5hIGRlIHN1cyBpZGVhcyBtw6FzIGltcG9ydGFudGVzIGVzIGxhIFpvbmEgZGUgRGVzYXJyb2xsbyBQcsOzeGltbyAoWkRQKS4gRXN0ZSBjb25jZXB0byBzZSByZWZpZXJlIGEgbGEgZGlmZXJlbmNpYSBlbnRyZSBsbyBxdWUgdW4gZXN0dWRpYW50ZSBwdWVkZSBoYWNlciBwb3Igc8OtIHNvbG8geSBsbyBxdWUgcHVlZGUgbG9ncmFyIGNvbiBsYSBheXVkYSBkZSBhbGd1aWVuIG3DoXMsIGNvbW8gdW4gbWFlc3RybyBvIHVuIGNvbXBhw7Flcm8gbcOhcyBhdmFuemFkby4gU2Vnw7puIFZ5Z290c2t5ICgxOTc4KSwgZWwgYXByZW5kaXphamUgb2N1cnJlIG1lam9yIGN1YW5kbyBsb3MgZXN0dWRpYW50ZXMgdHJhYmFqYW4ganVudG9zIHkgc2UgYXBveWFuIG11dHVhbWVudGUuIAogICAgICAgICAgICAgIHAubWItNCBFc3RvIHNpZ25pZmljYSBxdWUgZWwgZW50b3JubyBzb2NpYWwgeSBjdWx0dXJhbCBkb25kZSBhcHJlbmRlbiwgZXMgbXV5IGltcG9ydGFudGUuIEVuIGVsIGF1bGEsIGVzdG8gc2UgdHJhZHVjZSBlbiBmb21lbnRhciBsYSBjb2xhYm9yYWNpw7NuIHkgZWwgZGnDoWxvZ28sIHBlcm1pdGllbmRvIHF1ZSBsb3MgZXN0dWRpYW50ZXMgYXByZW5kYW4gdW5vcyBkZSBvdHJvcyB5IGRlc2Fycm9sbGVuIHN1IHBlbnNhbWllbnRvIGNyw610aWNvLgoKICAgICAgICAgICAgLmQtbm9uZS5kLWxnLWJsb2NrLmNvbC1tZC02LmNvbC1sZy00KGRhdGEtYW9zPSJ6b29tLWluLWxlZnQiKQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy0yOS5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQogICAgICAgICAgLnJvdy5wLTQucHgtbWQtNS5weS1sZy01Lmp1c3RpZnktY29udGVudC1iZXR3ZWVuCiAgICAgICAgICAgIC5jb2wtbWQtMTIuY29sLWxnLTcubWItNC5tYi1tZC0wKGRhdGEtYW9zPSJ6b29tLWluLXJpZ2h0IikKICAgICAgICAgICAgICBwLnRleHQtYm9sZCBKb2huIERld2V5CiAgICAgICAgICAgICAgcC5tYi0xIFJlYWxpesOzIGdyYW5kZXMgYXBvcnRlcyBhbCBjb25zdHJ1Y3RpdmlzbW8sIGFsIGRlZmVuZGVyIHF1ZSBlbCBhcHJlbmRpemFqZSBkZWJlIGJhc2Fyc2UgZW4gbGEgZXhwZXJpZW5jaWEuIERld2V5ICgxOTM4KSBjcmXDrWEgcXVlIGxvcyBlc3R1ZGlhbnRlcyBhcHJlbmRlbiBtZWpvciBjdWFuZG8gcGFydGljaXBhbiBhY3RpdmFtZW50ZSBlbiBzdSBlZHVjYWNpw7NuLCBhIHRyYXbDqXMgZGUgZXhwZXJpZW5jaWFzIHByw6FjdGljYXMgeSByZWxldmFudGVzLiAKICAgICAgICAgICAgICBwLm1iLTQgUGFyYSDDqWwsIGxhIGVkdWNhY2nDs24gZGViZSBjb25lY3RhcnNlIGNvbiBsYSB2aWRhIHJlYWwuIEVuIGVzdGUgc2VudGlkbywgRGV3ZXkgcHJvbW92w61hIHF1ZSBsYXMgYXVsYXMgZGViZW4gc2VyIGVzcGFjaW9zIGRvbmRlIGxvcyBlc3R1ZGlhbnRlcyBwdWVkYW4gZXhwbG9yYXIsIGV4cGVyaW1lbnRhciB5IHJlZmxleGlvbmFyIHNvYnJlICBsbyBxdWUgZXN0w6FuIGFwcmVuZGllbmRvLiBBc8OtLCBlbCByb2wgZGVsIG1hZXN0cm8gZXMgbcOhcyBkZSBndcOtYSB5IGZhY2lsaXRhZG9yLCBxdWUgZGUgc2ltcGxlIHRyYW5zbWlzb3IgZGUgaW5mb3JtYWNpw7NuLCBheXVkYW5kbyBhIGxvcyBlc3R1ZGlhbnRlcyBhIGRlc2N1YnJpciBwb3Igc8OtIG1pc21vcy4KICAgICAgICAgICAgLmQtbm9uZS5kLWxnLWJsb2NrLmNvbC1tZC02LmNvbC1sZy00KGRhdGEtYW9zPSJ6b29tLWluLWxlZnQiKQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy0zMC5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQogICAgICAgICAgLnJvdy5wLTQucHgtbWQtNS5weS1sZy01Lmp1c3RpZnktY29udGVudC1iZXR3ZWVuCiAgICAgICAgICAgIC5jb2wtbWQtMTIuY29sLWxnLTcubWItNC5tYi1tZC0wKGRhdGEtYW9zPSJ6b29tLWluLXJpZ2h0IikKICAgICAgICAgICAgICBwLnRleHQtYm9sZCBEYXZpZCBBdXN1YmVsCiAgICAgICAgICAgICAgcC5tYi0xIFNlIGNlbnRyw7MgZW4gbGEgaWRlYSBkZSBhcHJlbmRpemFqZSBzaWduaWZpY2F0aXZvLiBTZWfDum4gQXVzdWJlbCAoMTk2OCksIGVsIGFwcmVuZGl6YWplIGVzIG3DoXMgZWZlY3Rpdm8gY3VhbmRvIGxvcyBlc3R1ZGlhbnRlcyBwdWVkZW4gcmVsYWNpb25hciBudWV2b3MgY29ub2NpbWllbnRvcyBjb24gbG8gcXVlIHlhIHNhYmVuLiBFc3RvIHNpZ25pZmljYSBxdWUgbG9zIGVkdWNhZG9yZXMgZGViZW4gYXl1ZGFyIGEgbG9zIGVzdHVkaWFudGVzIGEgb3JnYW5pemFyIHkgZXN0cnVjdHVyYXIgbGEgaW5mb3JtYWNpw7NuIGRlIG1hbmVyYSBxdWUgdGVuZ2Egc2VudGlkbyBwYXJhIGVsbG9zLiAKCiAgICAgICAgICAgICAgcC5tYi00IEFkZW3DoXMsIEF1c3ViZWwgZW5mYXRpemEgcXVlIGxhIG1vdGl2YWNpw7NuIGVzIGNsYXZlOyBsb3MgZXN0dWRpYW50ZXMgbmVjZXNpdGFuIHZlciBsYSByZWxldmFuY2lhIGRlIGxvIHF1ZSBlc3TDoW4gYXByZW5kaWVuZG8sIHBhcmEgcXVlIHNlYSBzaWduaWZpY2F0aXZvLiBFc3RvIGltcGxpY2EgcXVlIGxvcyBtYWVzdHJvcyBkZWJlbiBjcmVhciB1biBhbWJpZW50ZSBkb25kZSBsb3MgZXN0dWRpYW50ZXMgc2Ugc2llbnRhbiBpbnRlcmVzYWRvcyB5IGNvbmVjdGFkb3MgY29uIGVsIGNvbnRlbmlkby4KICAgICAgICAgICAgLmQtbm9uZS5kLWxnLWJsb2NrLmNvbC1tZC02LmNvbC1sZy00KGRhdGEtYW9zPSJ6b29tLWluLWxlZnQiKQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy0zMS5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQoKICAgIGgyIFByaW5jaXBpb3MgZGVsIGFwcmVuZGl6YWplIGFjdGl2byB5IGxhIGNvbnN0cnVjY2nDs24gZGVsIGNvbm9jaW1pZW50bwogICAgcC5tYi00IEFsIHByb2Z1bmRpemFyIGVuIGVsIGNvbnN0cnVjdGl2aXNtbywgZXMgY2xhdmUgY29tcHJlbmRlciBkb3MgZGUgc3VzIHByaW5jaXBpb3MgZnVuZGFtZW50YWxlczogZWwgYXByZW5kaXphamUgYWN0aXZvIHkgbGEgY29uc3RydWNjacOzbiBkZWwgY29ub2NpbWllbnRvLiBFc3RvcyBwcmluY2lwaW9zIHNlIGNlbnRyYW4gZW4gbGEgaWRlYSBkZSAgcXVlIGVsIGFwcmVuZGl6YWplIG5vIGNvbnNpc3RlIHNpbXBsZW1lbnRlIGVuIHJlY2liaXIgaW5mb3JtYWNpw7NuLCBzaW5vIGVuIHBhcnRpY2lwYXIgYWN0aXZhbWVudGUgZW4gbGEgY3JlYWNpw7NuIGRlIHNpZ25pZmljYWRvIGEgdHJhdsOpcyBkZSBsYSBpbnRlcmFjY2nDs24geSBsYSBleHBlcmllbmNpYS4gRGVzZGUgZXN0YSBwZXJzcGVjdGl2YSwgZWwgYXByZW5kaXphamUgc2UgY29udmllcnRlIGVuIHVuIHByb2Nlc28gZGluw6FtaWNvIHkgcGVyc29uYWxpemFkbywgZW4gZWwgcXVlIGNhZGEgZXN0dWRpYW50ZSBjb25zdHJ1eWUgc3VzIHByb3BpYXMgY29tcHJlbnNpb25lcyBhIHBhcnRpciBkZSBzdSBleHBlcmllbmNpYSB5IGRlbCBkacOhbG9nbyBjb24gb3Ryb3MuCgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtMTIuY29sLWxnLTcoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgIHAubWItNCBBbXBsaWVtb3MgbGEgaW5mb3JtYWNpw7NuIHNvYnJlIGNhZGEgdW5vIGRlIGVzdG9zIHByaW5jaXBpb3M6CiAgICAgICAgQWNvcmRpb25BKHRpcG89ImIiKQogICAgICAgICAgLmRpdih0aXR1bG89IkFwcmVuZGl6YWplIGFjdGl2byIpCiAgICAgICAgICAgIHAubWItNCBTZSByZWZpZXJlIGEgbGEgcGFydGljaXBhY2nDs24gZGlyZWN0YSBkZWwgZXN0dWRpYW50ZSBlbiBzdSBwcm9jZXNvIGRlIGFwcmVuZGl6YWplLiBFbiBlc3RlIGVuZm9xdWUsIGVsIGVzdHVkaWFudGUgbm8gZXMgdW4gcmVjZXB0b3IgcGFzaXZvIGRlIGluZm9ybWFjacOzbiwgc2lubyB1biBwYXJ0aWNpcGFudGUgY29tcHJvbWV0aWRvIHF1ZSBleHBsb3JhLCBhbmFsaXphIHkgY3Vlc3Rpb25hIGVsIGNvbnRlbmlkbywgY29uZWN0w6FuZG9sbyBjb24gc3VzIHByb3BpYXMgZXhwZXJpZW5jaWFzIHkgY29ub2NpbWllbnRvcyBwcmV2aW9zIChCb253ZWxsICYgRWlzb24sIDE5OTEpLiBEZSBoZWNobywgaW52ZXN0aWdhY2lvbmVzIGhhbiBkZW1vc3RyYWRvIHF1ZSBlbCBhcHJlbmRpemFqZSBhY3Rpdm8sIGVuIGNvbXBhcmFjacOzbiBjb24gbGEgaW5zdHJ1Y2Npw7NuIHRyYWRpY2lvbmFsLCByZXN1bHRhIGVuIHVuYSBjb21wcmVuc2nDs24gbcOhcyBwcm9mdW5kYSB5IGVuIHVuYSByZXRlbmNpw7NuIGEgbGFyZ28gcGxhem8gZGVsIGNvbm9jaW1pZW50byAoUHJpbmNlLCAyMDA0KS4gCiAgICAgICAgICAgIHAubWItMCBFc3RlIHByaW5jaXBpbyBpbXB1bHNhIGxhIGlkZWEgZGUgcXVlIGVsIGRvY2VudGUgZGViZSBjcmVhciB1biBlbnRvcm5vIGVuIGVsIHF1ZSBlbCBlc3R1ZGlhbnRlIHB1ZWRhIGV4cGVyaW1lbnRhciwgcmVzb2x2ZXIgcHJvYmxlbWFzIHkgcmVmbGV4aW9uYXIgYWN0aXZhbWVudGUgc29icmUgZWwgY29udGVuaWRvLiBBc8OtLCBzZSBmYWNpbGl0YSB1biBhcHJlbmRpemFqZSBtw6FzIHNpZ25pZmljYXRpdm8gcXVlIHRyYXNjaWVuZGUgbGEgc2ltcGxlIG1lbW9yaXphY2nDs24uCiAgICAgICAgICAuZGl2KHRpdHVsbz0iQ29uc3RydWNjacOzbiBkZWwgY29ub2NpbWllbnRvIikKICAgICAgICAgICAgcCBQcm9jZXNvIG1lZGlhbnRlIGVsIGN1YWwgZWwgZXN0dWRpYW50ZSBubyBzb2xvIGFzaW1pbGEgbnVldmEgaW5mb3JtYWNpw7NuLCBzaW5vIHF1ZSB0YW1iacOpbiBsYSBpbnRlcnByZXRhIHkgcmVvcmdhbml6YSBlbiBmdW5jacOzbiBkZSBzdSBlc3RydWN0dXJhIGNvZ25pdGl2YSBwcmV2aWEuIFNlZ8O6biBQaWFnZXQgKDE5NTIpLCBlbCBjb25vY2ltaWVudG8gbm8gc2UgcmVjaWJlIGRlIG1hbmVyYSBwYXNpdmE7IGVuIGx1Z2FyIGRlIGVzbywgc2UgY29uc3RydXllIGEgdHJhdsOpcyBkZSB1biBwcm9jZXNvIGRlIGFkYXB0YWNpw7NuIGVuIGVsIHF1ZSBlbCBlc3R1ZGlhbnRlIHRyYW5zZm9ybWEgeSBtb2RpZmljYSBzdXMgZXNxdWVtYXMgbWVudGFsZXMgYWwgZW5mcmVudGFyc2UgY29uIG51ZXZhcyBpZGVhcyB5IGV4cGVyaWVuY2lhcy4gRXN0byBzaWduaWZpY2EgcXVlIGVsIGFwcmVuZGl6YWplIGRlcGVuZGUgZGUgbGEgY2FwYWNpZGFkIGRlIGNhZGEgaW5kaXZpZHVvIHBhcmEgY29uZWN0YXIgbG9zIG51ZXZvcyBjb250ZW5pZG9zIGNvbiBzdSBjb25vY2ltaWVudG8gZXhpc3RlbnRlLCByZW9yZ2FuaXrDoW5kb2xvIHkgdHJhbnNmb3Jtw6FuZG9sbyBlbiBjb21wcmVuc2lvbmVzIG3DoXMgY29tcGxlamFzLgogICAgICAuY29sLTEyLmNvbC1sZy01LmQtbm9uZS5kLWxnLWJsb2NrKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctMzIucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKCgogICAgLnJvdy5tYi01CiAgICAgIC5kLW5vbmUuZC14bC1ibG9jay5jb2wteGwtNS5teC1hdXRvLm10LTQubXQteGwtMChkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy0zMy5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKSAgCiAgICAgIC5jb2wtMTIuY29sLXhsLTcuZC1mbGV4LmZsZXgtY29sdW1uCiAgICAgICAgZGl2LmQtZmxleC5hbGlnbi1pdGVtcy1zdGFydC5iZy1hbWFyaWxsby5wLTQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIGltZy5tZS0zKHN0eWxlPSJ3aWR0aDogOTBweCIgc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTM0LnN2ZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgICAuZC1mbGV4LmZsZXgtY29sdW1uCiAgICAgICAgICAgIHAucGUteGwtMy5tYi0wKGRhdGEtYW9zPSJmYWRlLXVwIikgQW1ib3MgcHJpbmNpcGlvcyBpbnRlcmFjdMO6YW4gZGUgbWFuZXJhIHF1ZSBlbCBhcHJlbmRpemFqZSBhY3Rpdm8gZmFjaWxpdGEgbGEgY29uc3RydWNjacOzbiBkZWwgY29ub2NpbWllbnRvLCBwZXJtaXRpZW5kbyBhbCBlc3R1ZGlhbnRlIHVuIHJvbCBwcm90YWdvbmlzdGEgZW4gc3UgZWR1Y2FjacOzbiB5IHByb21vdmllbmRvIGVsIGF1dG9ycmVmbGV4acOzbiB5IGxhIGF1dG9ub23DrWEuICAKICAgICAgICBwIFBvciBlamVtcGxvLCBlbiB1biBhdWxhIGNvbnN0cnVjdGl2aXN0YSwgZWwgZG9jZW50ZSBwdWVkZSBpbXBsZW1lbnRhciBhY3RpdmlkYWRlcyBkZSBhcHJlbmRpemFqZSwgYmFzYWRvIGVuIHByb2JsZW1hcywgZG9uZGUgZWwgZXN0dWRpYW50ZSB0cmFiYWphIGVuIHJlc29sdmVyIHNpdHVhY2lvbmVzIHJlYWxlcyB5LCBlbiBlbCBwcm9jZXNvLCBjb25zdHJ1eWUgc3VzIGNvbm9jaW1pZW50b3MgYSBwYXJ0aXIgZGUgbGEgZXhwZXJpZW5jaWEgeSBsYSByZWZsZXhpw7NuIGNyw610aWNhLiBFc3RlIGVuZm9xdWUgdGFtYmnDqW4gZm9tZW50YSB1biBhbWJpZW50ZSBjb2xhYm9yYXRpdm8sIGVuIGVsIGN1YWwgbG9zIGVzdHVkaWFudGVzLCBhbCB0cmFiYWphciBqdW50b3MsIGNvbnN0cnV5ZW4gY29ub2NpbWllbnRvIGRlIGZvcm1hIGNvbGVjdGl2YSwgZW5yaXF1ZWNpZW5kbyBzdSBhcHJlbmRpemFqZSBtZWRpYW50ZSBsYSBkaXNjdXNpw7NuIHkgbGEgYXJndW1lbnRhY2nDs24gKERld2V5LCAxOTM4KS4KCiAgICAucm93LmJnLW1vcmFkby5iZy1mdWxsLXdpZHRoLnB5LTQKICAgICAgZGl2LnB4LTUucGItbWQtMy5weS00LmQtZmxleAogICAgICAgIC5jb2wtMTIuY29sLXhsLTcuZC1mbGV4LnBlLTQucGUteGwtNS5hbGlnbi1pdGVtcy1jZW50ZXIuZmxleC1jb2x1bW4oZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgaDIubWItNC5wYi0yLm1lLWF1dG8gSW1wbGljYWNpb25lcyBwYXJhIGxhIHByw6FjdGljYSBlZHVjYXRpdmEKICAgICAgICAgIHAubWItNCBFbCBjb25zdHJ1Y3RpdmlzbW8sIGNvbW8gdGVvcsOtYSBkZWwgYXByZW5kaXphamUsIHByb3BvbmUgdW5hIHZpc2nDs24gdHJhbnNmb3JtYWRvcmEgZGUgbGEgZWR1Y2FjacOzbiBlbiBsYSBxdWUgZWwgZXN0dWRpYW50ZSBzZSBjb252aWVydGUgZW4gZWwgcHJvdGFnb25pc3RhIGRlIHN1IHByb3BpbyBwcm9jZXNvIGRlIGNvbm9jaW1pZW50by4gTGVqb3MgZGUgc2VyIHVuIHJlY2VwdG9yIHBhc2l2bywgZWwgZXN0dWRpYW50ZSBlbiBlbCBlbmZvcXVlIGNvbnN0cnVjdGl2aXN0YSBwYXJ0aWNpcGEgYWN0aXZhbWVudGUgZW4gbGEgY29uc3RydWNjacOzbiBkZSBzaWduaWZpY2Fkb3MsIGJhc8OhbmRvc2UgZW4gc3VzIGV4cGVyaWVuY2lhcyBwcmV2aWFzIHkgZW4gbGEgaW50ZXJhY2Npw7NuIGNvbiBzdSBlbnRvcm5vLiBFbiBlc3RlIG1hcmNvLCBlbCByb2wgZGVsIGRvY2VudGUgY2FtYmlhIGEgdW4gZmFjaWxpdGFkb3IgcXVlIGd1w61hIHkgYXBveWEgYWwgZXN0dWRpYW50ZSBlbiBzdSBleHBsb3JhY2nDs24geSBjb21wcmVuc2nDs24gZGVsIG11bmRvLiBFc3RlIGVuZm9xdWUgbm8gc29sbyBtb2RpZmljYSBsYSBkaW7DoW1pY2EgZGVsIGF1bGEsIHNpbm8gcXVlIHRhbWJpw6luIHByb211ZXZlIHVuYSBlZHVjYWNpw7NuIG3DoXMgcGFydGljaXBhdGl2YSwgY2VudHJhZGEgZW4gZWwgZGVzYXJyb2xsbyBkZSBoYWJpbGlkYWRlcyBjcsOtdGljYXMsIHNvY2lhbGVzIHkgZGUgYXV0b3JyZWd1bGFjacOzbi4gQSBjb250aW51YWNpw7NuLCBlbiBlbCBQREYgSW1wbGljYWNpb25lcyBwYXJhIGxhIHByw6FjdGljYSBlZHVjYXRpdmEsIHNlIHByZXNlbnRhbiBsYXMgcHJpbmNpcGFsZXMgaW1wbGljYWNpb25lcyBkZWwgY29uc3RydWN0aXZpc21vIGVuIGxhIHByw6FjdGljYSBlZHVjYXRpdmEsIGRlc3RhY2FuZG8gZXN0cmF0ZWdpYXMgeSBtw6l0b2RvcyBxdWUgZmF2b3JlY2VuIHVuIGFwcmVuZGl6YWplIHNpZ25pZmljYXRpdm8geSBjb2xhYm9yYXRpdm8uCiAgICAgICAgICBhLmQtZmxleC5tZS1hdXRvLmJnLXdoaXRlLmJveC1zaGFkb3cuY3Vyc29yLXBvaW50ZXIoZGF0YS1hb3M9Inpvb20taW4iIDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9BbmV4b3NfNS5wZGYnKSIgdGFyZ2V0PSJfYmxhbmsiKQogICAgICAgICAgICBpbWcuaC0xMDAoc3R5bGU9IndpZHRoOiA0OHB4IiBzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL3BkZi1pY29uLXNxdWFyZS5zdmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQogICAgICAgICAgICBwLnRleHQtc21hbGwuZnMtMTRweC5teS1hdXRvLnB4LTIgPHN0cm9uZz5BbmV4by48L3N0cm9uZz4gSW1wbGljYWNpb25lcyBwYXJhIGxhIHByw6FjdGljYSBlZHVjYXRpdmEKICAgICAgICAgICAgIAogICAgICAgIC5kLW5vbmUuZC14bC1ibG9jay5jb2wteGwtNS5teC1hdXRvLm10LTQubXQteGwtMChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIGltZy5oLTEwMChzcmM9J0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctMzUucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKCgogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyIE1BVEVSSUFMIENPTVBMRU1FTlRBUklPCiAgICAgICAgLnJvdy5tYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctNwogICAgICAgICAgICBwIExvcyBpbnZpdGFtb3MgYSBleHBsb3JhciBlbCBtYXRlcmlhbCBjb21wbGVtZW50YXJpbyBkZSBlc3RlIGN1cnNvLCBlbiBlc3RhIHNlY2Npw7NuIGVuY29udHJhcsOhIHJlY3Vyc29zIHF1ZSBsZSBwZXJtaXRpcsOhbiBwcm9mdW5kaXphciAgeSBlbnJpcXVlY2VyIHN1IGFwcmVuZGl6YWplIGVuIGxvcyB0ZW1hcyB0cmF0YWRvcyBlbiBlc3RhIHVuaWRhZC4KICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9uYXAubmF0aW9uYWxhY2FkZW1pZXMub3JnL2NhdGFsb2cvOTg1My9ob3ctcGVvcGxlLWxlYXJuLWJyYWluLW1pbmQtZXhwZXJpZW5jZS1hbmQtc2Nob29sLWV4cGFuZGVkLWVkaXRpb24iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBCcmFuc2ZvcmQsIEouIEQuLCBCcm93biwgQS4gTC4sICYgQ29ja2luZywgUi4gUi4gKEVkcy4pLiAoMjAwMCkuIEhvdyBQZW9wbGUgTGVhcm46IEJyYWluLCBNaW5kLCBFeHBlcmllbmNlLCBhbmQgU2Nob29sLiBOYXRpb25hbCBBY2FkZW15IFByZXNzLiAKCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VkaXRvcmlhbC51cG4uZWR1LmNvL3dwLWNvbnRlbnQvcGFnZXMvZnJlaXJlL2luZGV4Lmh0bWwiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBVbml2ZXJzaWRhZCBwZWRhZ8OzZ2ljYSBuYWNpb25hbC4gKHNlcCAyMDIxKSBQYXVsbyBGcmVpcmUgbWFlc3RybyBkZSBtYWVzdHJvcyAKCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zLm9mZnNldC1sZy0xCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nJykK"},null]}